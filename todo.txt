CHANNELS
SqliteColumn(name=id, affinity=INTEGER, isNullable=true, inPrimaryKey=true)
SqliteColumn(name=channel_id, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=channel_name, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=channel_desc, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=channel_status, affinity=INTEGER, isNullable=true, inPrimaryKey=false)

NOTIFICATIONS
SqliteColumn(name=id, affinity=INTEGER, isNullable=true, inPrimaryKey=true)
SqliteColumn(name=sys_channel_id, affinity=INTEGER, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=sys_noti_id, affinity=INTEGER, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=title, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=message, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=msg_type, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=msg_src, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=msg_url, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=soundfile, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=active, affinity=INTEGER, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=created, affinity=INTEGER, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=expires, affinity=INTEGER, isNullable=true, inPrimaryKey=false)

PROFILE
SqliteColumn(name=id, affinity=INTEGER, isNullable=true, inPrimaryKey=true)
SqliteColumn(name=contact_id, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=user_name, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=email_address, affinity=TEXT, isNullable=true, inPrimaryKey=false)
SqliteColumn(name=contact_token, affinity=TEXT, isNullable=true, inPrimaryKey=false)

Android package name: com.notipievoicedrop.app


import appStateManager from './AppStateManager';

const processReceivedMessage = async (remoteMessage) => {
  if (remoteMessage.data) {
    const { channel_id, title, message } = remoteMessage.data;

    // Store data in the singleton
    appStateManager.set('channelId', channel_id);
    appStateManager.set('notificationTitle', title);
    appStateManager.set('notificationMessage', message);

    console.log('[FCMService] Data stored in AppStateManager:', appStateManager.getAll());
  }
};

WHEN THE APP IS IN THE FOREGROUND A NOTI WONT SHOW (ONLY WHEN APP IS IN BACKGROUND WILL IT BEHAVE LIKE A NORMAL NOTI)
You can use : npm install react-native-push-notification to show when app is in foreground.

SOUND FILE LOCATIONS:
2. Check Asset Location
Ensure that your internal sound files are located in the correct directory and are accessible.

For Android
Place your sound files in the android/app/src/main/res/raw directory. If the raw folder does not exist, create it.

For iOS
Add your sound files to the Xcode project under the Resources folder.

TODO 11052025
1. When a noti arrives we need to show IT
2. Ask to add channel etc



The api url to update the fcm token on the server is http://192.168.1.28/notipie/api/refresh_token and the php function is:
public function update_fcm_token($userId, $fcmToken)
	{
		if (!is_numeric($userId) || empty($fcmToken)) {
			log_message('error', 'Invalid parameters for update_fcm_token.');
			return false;
		}

		$data = [
			'fcm_token' => $fcmToken,
			'updated_at' => date('Y-m-d H:i:s') // Use DATETIME format if your column is DATETIME/TIMESTAMP
		];

		$this->db->where('id', (int)$userId);
		$updated = $this->db->update('users', $data);

		if (!$updated) {
			log_message('error', sprintf(
				'Failed to update fcm_token for user_id %d. DB Error: %s',
				$userId,
				json_encode($this->db->error()) // Get detailed error
			));
			return false;
		}

		return true; // Return true if the query executed without DB error
	}

	- need a function to get profile details
	- need to prevent more than 1 record in profiles
	- on getToken --  sendtoserver - check this happens once
	- onTokenReferesh --  sendtoserver - check this happens once
	
	SIGNING KEY SETUP
	Debug:
	signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

	For release:
	signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
			storePassword MYAPP_RELEASE_STORE_PASSWORD
			keyAlias MYAPP_RELEASE_KEY_ALIAS
			keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }


BUG LIST 19-05-2025
- 1. If you close the app then you have to open it twice to open it.
2. The allowing channel has a funny where I had to manually go and activate the channel to receive
3. One thing we forgot in the Notification section on the phone, where you view the notifications, you cant see whom it was from
4. Need to add battery permission
5. Setup must first get fcm token before showing setup screen

On iOS, push notifications are handled differently than on Android:

iOS apps can always receive push notifications, even if the app is in the background, closed, or the device has not opened the app for days or weeks.
Battery optimization settings are not needed for push notifications on iOS. Apple’s system (APNs) delivers notifications to the device, and the system displays them to the user regardless of your app’s background state.
User must have notifications enabled for your app in iOS Settings. If the user disables notifications, your app will not receive them.
Silent/background notifications (content-available: 1) may be throttled or delayed if your app is force-closed or not used for a long time, but standard push notifications (alerts, badges, sounds) are reliably delivered.
Summary:

On iOS, you do not need to request any battery optimization exemption for push notifications.
As long as the user has not disabled notifications for your app, push notifications will be delivered at any time, even if the app is backgrounded or unused for days.
Let me know if you need details about iOS notification permissions or background modes!